name: Reusable Maven Build and Publish

on:
  workflow_call:
    inputs:
      java-version:
        description: 'Java version to use'
        required: false
        type: string
        default: '8'
      java-distribution:
        description: 'Java distribution to use'
        required: false
        type: string
        default: 'temurin'
      maven-goals:
        description: 'Maven goals to execute'
        required: false
        type: string
        default: 'clean package'
      skip-deploy:
        description: 'Skip deploying to GitHub Packages'
        required: false
        type: boolean
        default: false
      github-packages-url:
        description: 'GitHub Packages repository URL'
        required: false
        type: string
        default: 'https://maven.pkg.github.com/'
      use-custom-token:
        description: 'Use custom token for cross-repository package access'
        required: false
        type: boolean
        default: false
    secrets:
      custom_token:
        description: 'Custom token with broader access for cross-repository package access'
        required: false

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    
    env:
      ORGANIZATION: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.repository }}
      GITHUB_TOKEN: ${{ inputs.use-custom-token == true && secrets.custom_token || github.token }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important for git history and version calculation

      - name: Set up JDK ${{ inputs.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ inputs.java-version }}
          distribution: ${{ inputs.java-distribution }}
          cache: 'maven'

      - name: Set version variables
        id: versions
        run: |
          # Debug info about the context
          echo "GITHUB_REF: ${GITHUB_REF}"
          echo "GITHUB_HEAD_REF: ${GITHUB_HEAD_REF}"
          echo "GITHUB_BASE_REF: ${GITHUB_BASE_REF}"
          echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
          
          # Determine branch name properly for both pushes and pull requests
          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            # For PRs, use the head branch (source branch of the PR)
            BRANCH_NAME="${GITHUB_HEAD_REF}"
            echo "Pull request detected, using head branch: ${BRANCH_NAME}"
          else
            # For pushes, extract from GITHUB_REF
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            echo "Push detected, using branch: ${BRANCH_NAME}"
          fi
          
          GIT_SHA=$(git rev-parse --short HEAD)
          POM_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Set the identifier based on branch pattern and store locally
          BRANCH_IDENTIFIER=""
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            BRANCH_IDENTIFIER="-SNAPSHOT"
            echo "Using SNAPSHOT identifier for develop branch - targets DEVELOP and QA environments"
          elif [[ "$BRANCH_NAME" == release/* || "$BRANCH_NAME" == hotfix/* ]]; then
            BRANCH_IDENTIFIER="-RC"
            echo "Using RC identifier for ${BRANCH_NAME} branch - targets UAT and PRODUCTION environments"
          else
            echo "WARNING: Branch pattern not recognized: ${BRANCH_NAME}"
            echo "Defaulting to -UNVERIFIED identifier for tracking"
            BRANCH_IDENTIFIER="-UNVERIFIED"
          fi
          
          # Set the environment variables for next steps
          echo "IDENTIFIER=${BRANCH_IDENTIFIER}" >> $GITHUB_ENV
          echo "VERSION=${POM_VERSION}" >> $GITHUB_ENV
          echo "GIT_SHA=-${GIT_SHA}" >> $GITHUB_ENV
          echo "BUILD_NUM=-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          
          # Print final version components for debugging
          echo "Final version components:"
          echo "VERSION: ${POM_VERSION}"
          echo "IDENTIFIER: ${BRANCH_IDENTIFIER}"
          echo "GIT_SHA: -${GIT_SHA}"
          echo "BUILD_NUM: -${GITHUB_RUN_NUMBER}"

      # Display token type being used (for debugging)
      - name: Display token type
        run: |
          if [[ "${{ inputs.use-custom-token }}" == "true" ]]; then
            echo "Using custom token for cross-repository package access"
          else
            echo "Using default GitHub token (repository-scoped access)"
          fi

      # Configure Maven settings.xml for GitHub Packages access
      - name: Setup Maven settings.xml
        run: |
          mkdir -p ~/.m2
          
          echo "<settings>
            <servers>
              <server>
                <id>github</id>
                <username>${GITHUB_ACTOR}</username>
                <password>${GITHUB_TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>github</id>
                    <url>${{ inputs.github-packages-url }}${ORGANIZATION}</url>
                    <snapshots><enabled>true</enabled></snapshots>
                    <releases><enabled>true</enabled></releases>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
          </settings>" > ~/.m2/settings.xml
          
          # Debug: Check the settings file
          echo "Maven settings.xml created:"
          cat ~/.m2/settings.xml

      # Build the project
      - name: Build with Maven
        run: |
          echo "Building with parameters:"
          echo "  Revision: ${{ env.VERSION }}"
          echo "  Branch Identifier: ${{ env.IDENTIFIER }}"
          echo "  SHA: ${{ env.GIT_SHA }}"
          echo "  Build Number: ${{ env.BUILD_NUM }}"
          
          mvn ${{ inputs.maven-goals }} \
            -Drevision=${{ env.VERSION }} \
            -DbranchIdentifier=${{ env.IDENTIFIER }} \
            -Dsha1=${{ env.GIT_SHA }} \
            -DbuildNumber=${{ env.BUILD_NUM }}

      # Deploy to GitHub Packages for all repositories except PRs
      - name: Deploy to GitHub Packages
        if: ${{ inputs.skip-deploy != true && github.event_name != 'pull_request' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/') || github.ref == 'refs/heads/main') }}
        run: |
          echo "Publishing artifact to GitHub Packages"
          
          mvn deploy \
            -DskipTests \
            -Drevision=${{ env.VERSION }} \
            -DbranchIdentifier=${{ env.IDENTIFIER }} \
            -Dsha1=${{ env.GIT_SHA }} \
            -DbuildNumber=${{ env.BUILD_NUM }}