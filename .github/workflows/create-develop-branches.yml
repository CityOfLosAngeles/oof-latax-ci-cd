name: Create Develop Branches

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'List of repositories (comma-separated, e.g., "repo1,repo2,repo3")'
        required: true
        type: string
      organization:
        description: 'GitHub organization name'
        required: true
        default: 'vishnu-parandhaman'
        type: string

jobs:
  create-develop-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      
      - name: Configure git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
      
      - name: Create develop branches
        env:
          TOKEN: ${{ secrets.PAT_TOKEN }}
          ORGANIZATION: ${{ github.event.inputs.organization }}
        run: |
          # Define color codes for logging
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          PURPLE='\033[0;35m'
          NC='\033[0m' # No Color
          
          # Initialize counters for summary
          TOTAL=0
          SUCCESS=0
          ALREADY_EXISTS=0
          NOT_FOUND=0
          EMPTY=0
          OTHER_ISSUES=0
          
          # Convert comma-separated list to array
          IFS=',' read -ra REPOS <<< "${{ github.event.inputs.repositories }}"
          
          echo -e "${BLUE}ℹ️ Starting processing of ${#REPOS[@]} repositories${NC}"
          
          # Loop through each repository
          for REPO in "${REPOS[@]}"; do
            REPO=$(echo $REPO | xargs) # Trim whitespace
            TOTAL=$((TOTAL+1))
            
            echo -e "\n${PURPLE}🔄 PROCESSING: $ORGANIZATION/$REPO${NC}"
            
            # Step 1: Check if repository exists
            echo -e "${BLUE}ℹ️ Checking if repository exists...${NC}"
            REPO_INFO=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$ORGANIZATION/$REPO")
            
            if echo "$REPO_INFO" | grep -q "Not Found"; then
              echo -e "${RED}❌ NOT FOUND: $ORGANIZATION/$REPO${NC}"
              NOT_FOUND=$((NOT_FOUND+1))
              continue
            fi
            
            echo -e "${BLUE}ℹ️ Repository found: $ORGANIZATION/$REPO${NC}"
            
            # Step 2: Check if develop branch already exists
            echo -e "${BLUE}ℹ️ Checking if develop branch exists...${NC}"
            BRANCHES=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$ORGANIZATION/$REPO/branches")
            
            if echo "$BRANCHES" | grep -q '"name": "develop"'; then
              echo -e "${YELLOW}⚠️ SKIPPED ('develop' branch exists): $ORGANIZATION/$REPO${NC}"
              ALREADY_EXISTS=$((ALREADY_EXISTS+1))
              continue
            fi
            
            # Step 3: Check if repository is empty
            echo -e "${BLUE}ℹ️ Checking if repository has content...${NC}"
            
            # Get default branch name
            DEFAULT_BRANCH=$(echo "$REPO_INFO" | grep '"default_branch"' | cut -d'"' -f4)
            if [ -z "$DEFAULT_BRANCH" ]; then
              DEFAULT_BRANCH="main" # fallback to main if we can't determine
            fi
            
            # Check if default branch has any commits
            COMMITS=$(curl -s -H "Authorization: token $TOKEN" \
              "https://api.github.com/repos/$ORGANIZATION/$REPO/commits?sha=$DEFAULT_BRANCH")
            
            # If commits returns an empty array or "Not Found", the repo is empty
            if [ "$COMMITS" = "[]" ] || echo "$COMMITS" | grep -q "Not Found"; then
              echo -e "${YELLOW}⚠️ SKIPPED (empty repository): $ORGANIZATION/$REPO${NC}"
              EMPTY=$((EMPTY+1))
              continue
            fi
            
            echo -e "${BLUE}ℹ️ Repository has content on branch '$DEFAULT_BRANCH'${NC}"
            
            # Step 4: Create develop branch from default branch for repositories with content
            TEMP_DIR=$(mktemp -d)
            cd $TEMP_DIR
            
            echo -e "${BLUE}ℹ️ Cloning repository...${NC}"
            git clone "https://$TOKEN@github.com/$ORGANIZATION/$REPO.git" .
            
            if [ $? -ne 0 ]; then
              echo -e "${RED}❌ CLONE FAILED: $ORGANIZATION/$REPO - This could be due to permissions or network issues${NC}"
              OTHER_ISSUES=$((OTHER_ISSUES+1))
              cd ..
              rm -rf $TEMP_DIR
              continue
            fi
            
            echo -e "${BLUE}ℹ️ Creating 'develop' branch from '$DEFAULT_BRANCH'...${NC}"
            
            if ! git checkout $DEFAULT_BRANCH; then
              echo -e "${RED}❌ CHECKOUT FAILED: $ORGANIZATION/$REPO - Could not checkout $DEFAULT_BRANCH branch${NC}"
              OTHER_ISSUES=$((OTHER_ISSUES+1))
              cd ..
              rm -rf $TEMP_DIR
              continue
            fi
            
            if ! git checkout -b develop; then
              echo -e "${RED}❌ BRANCH CREATION FAILED: $ORGANIZATION/$REPO - Could not create develop branch${NC}"
              OTHER_ISSUES=$((OTHER_ISSUES+1))
              cd ..
              rm -rf $TEMP_DIR
              continue
            fi
            
            if ! git push -u origin develop; then
              echo -e "${RED}❌ PUSH FAILED: $ORGANIZATION/$REPO - Could not push develop branch${NC}"
              OTHER_ISSUES=$((OTHER_ISSUES+1))
              cd ..
              rm -rf $TEMP_DIR
              continue
            fi
            
            echo -e "${GREEN}✅ SUCCESS (created 'develop' branch): $ORGANIZATION/$REPO${NC}"
            SUCCESS=$((SUCCESS+1))
            
            # Clean up
            cd ..
            rm -rf $TEMP_DIR
          done
          
          # Print summary
          echo -e "\n${BLUE}ℹ️ SUMMARY${NC}"
          echo -e "${BLUE}ℹ️ Total repositories processed: $TOTAL${NC}"
          echo -e "${GREEN}✅ Successfully created 'develop' branch: $SUCCESS${NC}"
          echo -e "${YELLOW}⚠️ Repositories with existing 'develop' branch: $ALREADY_EXISTS${NC}"
          echo -e "${YELLOW}⚠️ Empty repositories skipped: $EMPTY${NC}"
          echo -e "${RED}❌ Repositories not found: $NOT_FOUND${NC}"
          echo -e "${RED}❌ Repositories with other issues: $OTHER_ISSUES${NC}"